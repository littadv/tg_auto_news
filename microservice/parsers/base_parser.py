"""
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –ø–∞—Ä—Å–µ—Ä–∞

–°–æ–¥–µ—Ä–∂–∏—Ç –æ–±—â—É—é –ª–æ–≥–∏–∫—É –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π.
"""

import asyncio
import logging
from abc import ABC, abstractmethod
from typing import Optional, Callable, Awaitable, Any

from utils.date_checker import DateChecker
from utils.deduplication import DeduplicationManager
from utils.message_sender import MessageSender


class BaseParser(ABC):
    """
    –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–∞—Ä—Å–µ—Ä–æ–≤.
    """
    
    def __init__(
        self,
        name: str,
        message_sender: MessageSender,
        deduplication_manager: DeduplicationManager,
        date_checker: DateChecker,
        logger: Optional[logging.Logger] = None,
        error_callback: Optional[Callable[[str], Awaitable[None]]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            name: –ò–º—è –ø–∞—Ä—Å–µ—Ä–∞
            message_sender: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
            deduplication_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            date_checker: –ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –¥–∞—Ç
            logger: –õ–æ–≥–≥–µ—Ä
            error_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
        """
        self.name = name
        self.message_sender = message_sender
        self.deduplication_manager = deduplication_manager
        self.date_checker = date_checker
        self.logger = logger
        self.error_callback = error_callback
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞—Ä—Å–µ—Ä–∞
        self._running = False
        self._error_count = 0
        self._max_errors = 10  # –ú–∞–∫—Å–∏–º—É–º –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ–¥ –≤—Ä–µ–º–µ–Ω–Ω—ã–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ–º
    
    @abstractmethod
    async def start(self):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä
        
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª–∞—Å—Å–∞—Ö.
        """
        pass
    
    @abstractmethod
    async def stop(self):
        """
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–∞—Ä—Å–µ—Ä
        
        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –Ω–∞—Å–ª–µ–¥—É—é—â–∏—Ö –∫–ª–∞—Å—Å–∞—Ö.
        """
        pass
    
    async def send_error(self, error_message: str):
        """
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        
        Args:
            error_message: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        """
        if self.error_callback:
            try:
                await self.error_callback(error_message)
            except Exception as e:
                if self.logger:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def is_running(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ –ø–∞—Ä—Å–µ—Ä
        
        Returns:
            True –µ—Å–ª–∏ –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—É—â–µ–Ω
        """
        return self._running
    
    def increment_error_count(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self._error_count += 1
    
    def reset_error_count(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        self._error_count = 0
    
    def has_too_many_errors(self) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–ª–∏—à–∫–æ–º –ª–∏ –º–Ω–æ–≥–æ –æ—à–∏–±–æ–∫
        
        Returns:
            True –µ—Å–ª–∏ –æ—à–∏–±–æ–∫ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ
        """
        return self._error_count >= self._max_errors
    
    async def process_news_item(
        self,
        title: str,
        content: str,
        link: Optional[str] = None,
        raw_date: Optional[str] = None,
        source: Optional[str] = None
    ) -> bool:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ—Å—Ç–Ω–æ–π —ç–ª–µ–º–µ–Ω—Ç
        
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –¥–∞—Ç—ã, –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è.
        
        Args:
            title: –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ—Å—Ç–∏
            content: –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –Ω–æ–≤–æ—Å—Ç–∏
            link: –°—Å—ã–ª–∫–∞ –Ω–∞ –Ω–æ–≤–æ—Å—Ç—å
            raw_date: –°—ã—Ä–∞—è –¥–∞—Ç–∞ –Ω–æ–≤–æ—Å—Ç–∏
            source: –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–∏
            
        Returns:
            True –µ—Å–ª–∏ –Ω–æ–≤–æ—Å—Ç—å –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
            full_text = f"{title}\n{content}"
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            if self.deduplication_manager.is_duplicate(full_text):
                if self.logger:
                    self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç: {title[:50]}...")
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—É
            if not self.date_checker.check_news_date(
                text=full_text,
                link=link,
                raw_date_str=raw_date,
                window_hours=12,
                strict_today=True
            ):
                if self.logger:
                    self.logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—É—é –Ω–æ–≤–æ—Å—Ç—å: {title[:50]}...")
                return False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            if source:
                message = f"<b>{source}</b>\n{link or ''}\n{full_text}"
            else:
                message = f"<b>{self.name}</b>\n{link or ''}\n{full_text}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            success = await self.message_sender.send_news_message(message)
            
            if success:
                # –û—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—É—é
                self.deduplication_manager.mark_as_posted(full_text)
                self.reset_error_count()
                
                if self.logger:
                    self.logger.info(f"–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞: {title[:50]}...")
                
                return True
            else:
                if self.logger:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å: {title[:50]}...")
                return False
                
        except Exception as e:
            self.increment_error_count()
            
            error_msg = (
                f"üö® <b>{self.name} Parser Error</b>\n\n"
                f"‚ùå <b>Error:</b> News processing failed\n"
                f"üìù <b>Details:</b> {str(e)[:200]}"
            )
            
            await self.send_error(error_msg)
            
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–æ–≤–æ—Å—Ç–∏: {e}")
            
            return False
    
    async def sleep_with_jitter(self, base_timeout: int, jitter: float = 0.5):
        """
        –ó–∞—Å—ã–ø–∞–µ—Ç –Ω–∞ —Å–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —Å –±–∞–∑–æ–≤—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
        
        Args:
            base_timeout: –ë–∞–∑–æ–≤—ã–π —Ç–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
            jitter: –†–∞–∑–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–∏ (0.0 - 1.0)
        """
        import random
        sleep_time = base_timeout - random.uniform(0, jitter)
        await asyncio.sleep(max(0.1, sleep_time))
    
    def get_status(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–∞—Ä—Å–µ—Ä–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –ø–∞—Ä—Å–µ—Ä–∞
        """
        return {
            'name': self.name,
            'running': self._running,
            'error_count': self._error_count,
            'max_errors': self._max_errors,
            'has_too_many_errors': self.has_too_many_errors(),
            'posted_count': self.deduplication_manager.get_posted_count()
        }
