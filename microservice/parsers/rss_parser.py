"""
–ü–∞—Ä—Å–µ—Ä RSS –ª–µ–Ω—Ç

–ü–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ RSS –ª–µ–Ω—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª.
"""

import asyncio
import random
import logging
from typing import Dict, Optional, Callable, Awaitable
import httpx
import feedparser

from .base_parser import BaseParser
from config.channels import RSSChannel
from config.settings import Settings
from utils.http_client import get_browser_headers


class RSSParser(BaseParser):
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è RSS –ª–µ–Ω—Ç
    
    –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç RSS –ª–µ–Ω—Ç—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏.
    """
    
    def __init__(
        self,
        channels: Dict[str, RSSChannel],
        settings: Settings,
        http_client: httpx.AsyncClient,
        message_sender,
        deduplication_manager,
        date_checker,
        logger: Optional[logging.Logger] = None,
        error_callback: Optional[Callable[[str], Awaitable[None]]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RSS –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            channels: –°–ª–æ–≤–∞—Ä—å RSS –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            http_client: HTTP –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
            message_sender: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
            deduplication_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            date_checker: –ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –¥–∞—Ç
            logger: –õ–æ–≥–≥–µ—Ä
            error_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
        """
        super().__init__(
            name="RSS Parser",
            message_sender=message_sender,
            deduplication_manager=deduplication_manager,
            date_checker=date_checker,
            logger=logger,
            error_callback=error_callback
        )
        
        self.channels = channels
        self.settings = settings
        self.http_client = http_client
        self._tasks = []
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç RSS –ø–∞—Ä—Å–µ—Ä"""
        try:
            if self.logger:
                self.logger.info(f"–ó–∞–ø—É—Å–∫ RSS –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            self._running = True
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
            for channel_name, channel in self.channels.items():
                task = asyncio.create_task(
                    self._monitor_channel(channel_name, channel)
                )
                self._tasks.append(task)
            
            if self.logger:
                self.logger.info("RSS –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*self._tasks, return_exceptions=True)
            
        except Exception as e:
            self.increment_error_count()
            
            error_msg = (
                f"üö® <b>RSS Parser Error</b>\n\n"
                f"‚ùå <b>Startup failed:</b> {type(e).__name__}\n"
                f"üìù <b>Details:</b> {str(e)[:200]}"
            )
            
            await self.send_error(error_msg)
            
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ RSS –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç RSS –ø–∞—Ä—Å–µ—Ä"""
        try:
            self._running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
            for task in self._tasks:
                if not task.done():
                    task.cancel()
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞—á
            if self._tasks:
                await asyncio.gather(*self._tasks, return_exceptions=True)
            
            self._tasks.clear()
            
            if self.logger:
                self.logger.info("RSS –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ RSS –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    async def _monitor_channel(self, channel_name: str, channel: RSSChannel):
        """
        –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç RSS –∫–∞–Ω–∞–ª
        
        Args:
            channel_name: –ò–º—è –∫–∞–Ω–∞–ª–∞
            channel: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
        """
        while self._running:
            try:
                await self._fetch_and_process_channel(channel_name, channel)
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –∑–∞–ø—Ä–æ—Å–æ–º
                await self.sleep_with_jitter(self.settings.request_timeout)
                
            except asyncio.CancelledError:
                break
            except Exception as e:
                self.increment_error_count()
                
                error_msg = (
                    f"üö® <b>RSS Parser Error</b>\n\n"
                    f"‚ùå <b>Source:</b> {channel_name}\n"
                    f"‚ùå <b>Error:</b> {type(e).__name__}\n"
                    f"üìù <b>Details:</b> {str(e)[:200]}"
                )
                
                await self.send_error(error_msg)
                
                if self.logger:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–∞ {channel_name}: {e}")
                
                # –ñ–¥–µ–º –¥–æ–ª—å—à–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
                await self.sleep_with_jitter(self.settings.request_timeout * 2)
    
    async def _fetch_and_process_channel(self, channel_name: str, channel: RSSChannel):
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç RSS –∫–∞–Ω–∞–ª
        
        Args:
            channel_name: –ò–º—è –∫–∞–Ω–∞–ª–∞
            channel: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–∞
        """
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º RSS –ª–µ–Ω—Ç—É
            response = await self.http_client.get(
                channel.url,
                headers=get_browser_headers(accept_xml=True),
                follow_redirects=True
            )
            response.raise_for_status()
            
            # –ü–∞—Ä—Å–∏–º RSS
            feed = feedparser.parse(response.text)
            
            if not feed.entries:
                if self.logger:
                    self.logger.warning(f"–ü—É—Å—Ç–∞—è RSS –ª–µ–Ω—Ç–∞: {channel_name}")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–∏—Å–∏
            processed_count = 0
            for entry in feed.entries[:20]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                    title = entry.get('title', '').strip()
                    summary = entry.get('summary', '').strip()
                    link = entry.get('link', '').strip()
                    pub_date = entry.get('published') or entry.get('pubDate')
                    
                    if not title:
                        continue
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
                    success = await self.process_news_item(
                        title=title,
                        content=summary,
                        link=link,
                        raw_date=pub_date,
                        source=channel_name
                    )
                    
                    if success:
                        processed_count += 1
                        
                except Exception as e:
                    if self.logger:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏ RSS: {e}")
                    continue
            
            if self.logger and processed_count > 0:
                self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {processed_count} –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ {channel_name}")
                
        except httpx.ConnectTimeout:
            error_msg = (
                f"üö® <b>RSS Parser Error</b>\n\n"
                f"‚ùå <b>Source:</b> {channel_name}\n"
                f"‚ùå <b>Error:</b> ConnectTimeout\n"
                f"üìù <b>Details:</b> Connection timeout"
            )
            await self.send_error(error_msg)
            
        except httpx.ReadTimeout:
            error_msg = (
                f"üö® <b>RSS Parser Error</b>\n\n"
                f"‚ùå <b>Source:</b> {channel_name}\n"
                f"‚ùå <b>Error:</b> ReadTimeout\n"
                f"üìù <b>Details:</b> Read timeout"
            )
            await self.send_error(error_msg)
            
        except httpx.HTTPStatusError as e:
            error_msg = (
                f"üö® <b>RSS Parser Error</b>\n\n"
                f"‚ùå <b>Source:</b> {channel_name}\n"
                f"‚ùå <b>Error:</b> HTTP {e.response.status_code}\n"
                f"üìù <b>Details:</b> {str(e)[:200]}"
            )
            await self.send_error(error_msg)
            
        except Exception as e:
            error_msg = (
                f"üö® <b>RSS Parser Error</b>\n\n"
                f"‚ùå <b>Source:</b> {channel_name}\n"
                f"‚ùå <b>Error:</b> {type(e).__name__}\n"
                f"üìù <b>Details:</b> {str(e)[:200]}"
            )
            await self.send_error(error_msg)
    
    def get_channel_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        """
        return len(self.channels)
    
    def get_channel_names(self) -> list[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤
        """
        return list(self.channels.keys())


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
async def rss_parser(
    httpx_client,
    source: str,
    rss_link: str,
    posted_q,
    n_test_chars: int = 50,
    timeout: int = 2,
    –ø—Ä–æ–≤–µ—Ä–∫–∞_–¥–∞—Ç—ã=None,
    send_message_func=None,
    error_callback=None
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    
    –ü–∞—Ä—Å–∏—Ç RSS –ª–µ–Ω—Ç—É –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    from collections import deque
    import feedparser
    from ..utils.http_client import get_browser_headers
    
    while True:
        try:
            response = await httpx_client.get(
                rss_link,
                headers=get_browser_headers(accept_xml=True),
                follow_redirects=True,
            )
            response.raise_for_status()
        except httpx.ConnectTimeout as e:
            if error_callback:
                error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> ConnectTimeout\nüìù <b>Details:</b> {str(e)[:200]}'
                await error_callback(error_msg)
            await asyncio.sleep(timeout*2 - random.uniform(0, 0.5))
            continue
        except httpx.ReadTimeout as e:
            if error_callback:
                error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> ReadTimeout\nüìù <b>Details:</b> {str(e)[:200]}'
                await error_callback(error_msg)
            await asyncio.sleep(timeout*2 - random.uniform(0, 0.5))
            continue
        except httpx.HTTPStatusError as e:
            if error_callback:
                error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> HTTP {e.response.status_code}\nüìù <b>Details:</b> {str(e)[:200]}'
                await error_callback(error_msg)
            await asyncio.sleep(timeout*2 - random.uniform(0, 0.5))
            continue
        except Exception as e:
            if error_callback:
                error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> {type(e).__name__}\nüìù <b>Details:</b> {str(e)[:200]}'
                await error_callback(error_msg)
            await asyncio.sleep(timeout*2 - random.uniform(0, 0.5))
            continue

        try:
            feed = feedparser.parse(response.text)
            
            if not feed.entries:
                if error_callback:
                    error_msg = f'‚ö†Ô∏è <b>RSS Parser Warning</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Issue:</b> No entries found in RSS feed\nüìù <b>Response size:</b> {len(response.text)} bytes'
                    await error_callback(error_msg)
                await asyncio.sleep(timeout - random.uniform(0, 0.5))
                continue

        except Exception as e:
            if error_callback:
                error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> Feed parsing failed\nüìù <b>Details:</b> {str(e)[:200]}'
                await error_callback(error_msg)
            await asyncio.sleep(timeout - random.uniform(0, 0.5))
            continue

        for entry in feed.entries[:20][::-1]:
            try:
                if 'summary' not in entry and 'title' not in entry:
                    continue

                summary = entry.get('summary', '')
                title = entry.get('title', '')
                link = entry.get('link', '')
                pub  = entry.get('published') or entry.get('pubDate')  # –µ—Å–ª–∏ –µ—Å—Ç—å

                news_text = f'{title}\n{summary}'

                # –µ–¥–∏–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
                try:
                    if not –ø—Ä–æ–≤–µ—Ä–∫–∞_–¥–∞—Ç—ã(text=news_text, link=link, raw_date_str=pub, window_hours=12):
                        continue
                except Exception as e:
                    if error_callback:
                        error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> Date check failed\nüìù <b>Details:</b> {str(e)[:200]}'
                        await error_callback(error_msg)
                    continue

                head = news_text[:n_test_chars].strip()
                if head in posted_q:
                    continue

                post = f'<b>{source}</b>\n{link}\n{news_text}'

                if send_message_func is None:
                    print(post, '\n')
                else:
                    try:
                        await send_message_func(post)
                    except Exception as e:
                        if error_callback:
                            error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> Send message failed\nüìù <b>Details:</b> {str(e)[:200]}'
                            await error_callback(error_msg)
                        continue

                posted_q.appendleft(head)

            except Exception as e:
                if error_callback:
                    error_msg = f'üö® <b>RSS Parser Error</b>\n\n‚ùå <b>Source:</b> {source}\n‚ùå <b>Error:</b> Entry processing failed\nüìù <b>Details:</b> {str(e)[:200]}'
                    await error_callback(error_msg)
                continue

        await asyncio.sleep(timeout - random.uniform(0, 0.5))
