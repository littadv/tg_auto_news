"""
–ü–∞—Ä—Å–µ—Ä Telegram –∫–∞–Ω–∞–ª–æ–≤

–ü–∞—Ä—Å–∏—Ç –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ Telegram –∫–∞–Ω–∞–ª–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª.
"""

import logging
from typing import Dict, Optional, Callable, Awaitable
from telethon import TelegramClient, events

from .base_parser import BaseParser
from config.channels import TelegramChannel
from config.settings import Settings


class TelegramParser(BaseParser):
    """
    –ü–∞—Ä—Å–µ—Ä –¥–ª—è Telegram –∫–∞–Ω–∞–ª–æ–≤
    
    –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–µ Telegram –∫–∞–Ω–∞–ª—ã –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    
    def __init__(
        self,
        channels: Dict[int, TelegramChannel],
        settings: Settings,
        message_sender,
        deduplication_manager,
        date_checker,
        logger: Optional[logging.Logger] = None,
        error_callback: Optional[Callable[[str], Awaitable[None]]] = None
    ):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –ø–∞—Ä—Å–µ—Ä–∞
        
        Args:
            channels: –°–ª–æ–≤–∞—Ä—å –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            settings: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            message_sender: –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
            deduplication_manager: –ú–µ–Ω–µ–¥–∂–µ—Ä –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            date_checker: –ü—Ä–æ–≤–µ—Ä—è–ª—å—â–∏–∫ –¥–∞—Ç
            logger: –õ–æ–≥–≥–µ—Ä
            error_callback: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—à–∏–±–æ–∫
        """
        super().__init__(
            name="Telegram Parser",
            message_sender=message_sender,
            deduplication_manager=deduplication_manager,
            date_checker=date_checker,
            logger=logger,
            error_callback=error_callback
        )
        
        self.channels = channels
        self.settings = settings
        self.client: Optional[TelegramClient] = None
        
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ ID
        self._channel_lookup = {channel_id: channel for channel_id, channel in channels.items()}
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram –ø–∞—Ä—Å–µ—Ä"""
        try:
            if self.logger:
                self.logger.info(f"–ó–∞–ø—É—Å–∫ Telegram –ø–∞—Ä—Å–µ—Ä–∞ –¥–ª—è {len(self.channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # –°–æ–∑–¥–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
            self.client = TelegramClient(
                self.settings.telegram_session_name,
                self.settings.api_id,
                self.settings.api_hash
            )
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
            await self.client.start()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ URL –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            channel_urls = [channel.url for channel in self.channels.values()]
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            @self.client.on(events.NewMessage(chats=channel_urls))
            async def handler(event):
                await self._handle_new_message(event)
            
            self._running = True
            
            if self.logger:
                self.logger.info("Telegram –ø–∞—Ä—Å–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç –¥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
            await self.client.run_until_disconnected()
            
        except Exception as e:
            self.increment_error_count()
            
            error_msg = (
                f"üö® <b>Telegram Parser Error</b>\n\n"
                f"‚ùå <b>Connection failed:</b> {type(e).__name__}\n"
                f"üìù <b>Details:</b> {str(e)[:200]}"
            )
            
            await self.send_error(error_msg)
            
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Telegram –ø–∞—Ä—Å–µ—Ä–∞: {e}")
            
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç Telegram –ø–∞—Ä—Å–µ—Ä"""
        try:
            self._running = False
            
            if self.client:
                await self.client.disconnect()
                self.client = None
            
            if self.logger:
                self.logger.info("Telegram –ø–∞—Ä—Å–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                
        except Exception as e:
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Telegram –ø–∞—Ä—Å–µ—Ä–∞: {e}")
    
    async def _handle_new_message(self, event):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        
        Args:
            event: –°–æ–±—ã—Ç–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if not event.raw_text or event.raw_text.strip() == '':
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ—Å—Ç–∏ (–ø–µ—Ä–≤—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏)
            news_lines = event.raw_text.split('\n')
            news_text = ' '.join(news_lines[:2])
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                channel_id = event.message.peer_id.channel_id
                channel = self._channel_lookup[channel_id]
                channel_name = f"@{channel.name}"
                message_link = f"{channel.url}/{event.message.id}"
            except KeyError:
                # –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                error_msg = (
                    f"üö® <b>Telegram Parser Error</b>\n\n"
                    f"‚ùå <b>Channel ID not found:</b> {event.message.peer_id.channel_id}\n"
                    f"üìù <b>Available channels:</b> {list(self.channels.keys())}"
                )
                await self.send_error(error_msg)
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ—Å—Ç—å
            success = await self.process_news_item(
                title=news_text,
                content="",  # –î–ª—è Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
                link=message_link,
                source=channel_name
            )
            
            if not success and self.logger:
                self.logger.debug(f"–ù–æ–≤–æ—Å—Ç—å –Ω–µ –±—ã–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞: {news_text[:50]}...")
                
        except Exception as e:
            self.increment_error_count()
            
            error_msg = (
                f"üö® <b>Telegram Parser Error</b>\n\n"
                f"‚ùå <b>Handler error:</b> {type(e).__name__}\n"
                f"üìù <b>Details:</b> {str(e)[:200]}"
            )
            
            await self.send_error(error_msg)
            
            if self.logger:
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    def get_channel_count(self) -> int:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        Returns:
            –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–Ω–∞–ª–æ–≤
        """
        return len(self.channels)
    
    def get_channel_names(self) -> list[str]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
        
        Returns:
            –°–ø–∏—Å–æ–∫ –∏–º–µ–Ω –∫–∞–Ω–∞–ª–æ–≤
        """
        return [channel.name for channel in self.channels.values()]


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def telegram_parser(
    session: str,
    api_id: int,
    api_hash: str,
    telegram_channels: Dict[int, str],
    posted_q,
    n_test_chars: int = 50,
    –ø—Ä–æ–≤–µ—Ä–∫–∞_–¥–∞—Ç—ã=None,
    send_message_func=None,
    loop=None,
    error_callback=None
):
    """
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
    
    –°–æ–∑–¥–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç Telegram –∫–ª–∏–µ–Ω—Ç –≤ —Å—Ç–∞—Ä–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.
    """
    from collections import deque
    from telethon import TelegramClient, events
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç
    client = TelegramClient(session, api_id, api_hash, loop=loop)
    client.start()
    
    # –°—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª—ã
    telegram_channels_links = list(telegram_channels.values())
    
    @client.on(events.NewMessage(chats=telegram_channels_links))
    async def handler(event):
        """–ó–∞–±–∏—Ä–∞–µ—Ç –ø–æ—Å—Ç—ã –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º –∫–∞–Ω–∞–ª–æ–≤ –∏ –ø–æ—Å—ã–ª–∞–µ—Ç –∏—Ö –≤ –Ω–∞—à –∫–∞–Ω–∞–ª"""
        try:
            if event.raw_text == '':
                return

            news_text = ' '.join(event.raw_text.split('\n')[:2])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞—Ç—ã —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
            if not (–ø—Ä–æ–≤–µ—Ä–∫–∞_–¥–∞—Ç—ã is None):
                try:
                    if not –ø—Ä–æ–≤–µ—Ä–∫–∞_–¥–∞—Ç—ã(news_text):
                        return
                except Exception as e:
                    if error_callback:
                        error_msg = f'üö® <b>Telegram Parser Error</b>\n\n‚ùå <b>Date check failed:</b> {type(e).__name__}\nüìù <b>Details:</b> {str(e)[:200]}'
                        await error_callback(error_msg)
                    return

            head = news_text[:n_test_chars].strip()

            if head in posted_q:
                return

            try:
                source = telegram_channels[event.message.peer_id.channel_id]
                link = f'{source}/{event.message.id}'
                channel = '@' + source.split('/')[-1]
            except KeyError as e:
                if error_callback:
                    error_msg = f'üö® <b>Telegram Parser Error</b>\n\n‚ùå <b>Channel ID not found:</b> {event.message.peer_id.channel_id}\nüìù <b>Available channels:</b> {list(telegram_channels.keys())}'
                    await error_callback(error_msg)
                return

            post = f'<b>{channel}</b>\n{link}\n{news_text}'

            if send_message_func is None:
                print(post, '\n')
            else:
                try:
                    await send_message_func(post)
                except Exception as e:
                    if error_callback:
                        error_msg = f'üö® <b>Telegram Parser Error</b>\n\n‚ùå <b>Send message failed:</b> {type(e).__name__}\nüìù <b>Details:</b> {str(e)[:200]}'
                        await error_callback(error_msg)
                    return

            posted_q.appendleft(head)

        except Exception as e:
            if error_callback:
                error_msg = f'üö® <b>Telegram Parser Error</b>\n\n‚ùå <b>Handler error:</b> {type(e).__name__}\nüìù <b>Details:</b> {str(e)[:200]}'
                await error_callback(error_msg)

    return client
