"""
–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å tg_auto_news

–ù–æ–≤–∞—è –º–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–µ–π.
"""

import asyncio
import logging
from typing import List

# –ò–º–ø–æ—Ä—Ç—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
from config import Settings, ChannelConfig, ParserConfig

# –ò–º–ø–æ—Ä—Ç—ã —É—Ç–∏–ª–∏—Ç
from utils import (
    setup_logger, 
    HTTPClient, 
    MessageSender, 
    DeduplicationManager, 
    DateChecker,
    ErrorCallback
)

# –ò–º–ø–æ—Ä—Ç—ã –ø–∞—Ä—Å–µ—Ä–æ–≤
from parsers import TelegramParser, RSSParser
from parsers.html_parsers import BCSParser

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from telethon import TelegramClient


class NewsBot:
    """
    –ì–ª–∞–≤–Ω—ã–π –∫–ª–∞—Å—Å –±–æ—Ç–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
    
    –£–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º–∏ –ø–∞—Ä—Å–µ—Ä–∞–º–∏ –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏—é.
    """
    
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        self.settings = Settings()
        self.channel_config = ChannelConfig()
        self.parser_config = ParserConfig()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self.logger = setup_logger('news_bot', self.settings.log_level)
        self.telethon_logger = setup_logger('telethon', self.settings.telethon_log_level)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
        self.http_client = HTTPClient(
            connect_timeout=self.settings.http_connect_timeout,
            read_timeout=self.settings.http_read_timeout,
            write_timeout=self.settings.http_write_timeout,
            pool_timeout=self.settings.http_pool_timeout,
            retries=self.settings.http_retries,
            verify_ssl=self.settings.http_verify_ssl
        )
        
        self.date_checker = DateChecker(logger=self.logger)
        self.deduplication_manager = DeduplicationManager(
            max_size=self.settings.duplicate_check_messages,
            check_chars=self.settings.duplicate_check_chars,
            logger=self.logger
        )
        
        # Telegram –∫–ª–∏–µ–Ω—Ç—ã
        self.bot_client: TelegramClient = None
        self.message_sender: MessageSender = None
        self.error_callback: ErrorCallback = None
        
        # –ü–∞—Ä—Å–µ—Ä—ã
        self.parsers: List = []
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ
        self._running = False
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞"""
        try:
            self.logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
            
            # –°–æ–∑–¥–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
            await self.http_client.get_client()
            
            # –°–æ–∑–¥–∞–µ–º Telegram –±–æ—Ç –∫–ª–∏–µ–Ω—Ç
            self.bot_client = TelegramClient(
                self.settings.bot_session_name,
                self.settings.api_id,
                self.settings.api_hash,
                base_logger=self.telethon_logger
            )
            await self.bot_client.start(bot_token=self.settings.bot_token)
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å —Å–æ–æ–±—â–µ–Ω–∏–π
            self.message_sender = MessageSender(
                bot_client=self.bot_client,
                target_chat_id=self.settings.target_chat_id,
                logger=self.logger
            )
            
            # –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
            self.error_callback = ErrorCallback(self.message_sender)
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
            await self._load_history()
            
            # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä—ã
            await self._create_parsers()
            
            self.logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {e}")
            raise
    
    async def _load_history(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤"""
        try:
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
            temp_client = TelegramClient(
                self.settings.telegram_session_name,
                self.settings.api_id,
                self.settings.api_hash
            )
            await temp_client.start()
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
            await self.deduplication_manager.load_history_from_telegram(
                client=temp_client,
                chat_id=self.settings.target_chat_id,
                amount_messages=self.settings.duplicate_check_messages
            )
            
            await temp_client.disconnect()
            
            self.logger.info("–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {e}")
    
    async def _create_parsers(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã"""
        try:
            # Telegram –ø–∞—Ä—Å–µ—Ä
            if self.parser_config.is_parser_enabled('telegram'):
                telegram_channels = self.channel_config.get_enabled_telegram_channels()
                if telegram_channels:
                    telegram_parser = TelegramParser(
                        channels=telegram_channels,
                        settings=self.settings,
                        message_sender=self.message_sender,
                        deduplication_manager=self.deduplication_manager,
                        date_checker=self.date_checker,
                        logger=self.logger,
                        error_callback=self.error_callback
                    )
                    self.parsers.append(telegram_parser)
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω Telegram –ø–∞—Ä—Å–µ—Ä –¥–ª—è {len(telegram_channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # RSS –ø–∞—Ä—Å–µ—Ä
            if self.parser_config.is_parser_enabled('rss'):
                rss_channels = self.channel_config.get_enabled_rss_channels()
                if rss_channels:
                    http_client = await self.http_client.get_client()
                    rss_parser = RSSParser(
                        channels=rss_channels,
                        settings=self.settings,
                        http_client=http_client,
                        message_sender=self.message_sender,
                        deduplication_manager=self.deduplication_manager,
                        date_checker=self.date_checker,
                        logger=self.logger,
                        error_callback=self.error_callback
                    )
                    self.parsers.append(rss_parser)
                    self.logger.info(f"–°–æ–∑–¥–∞–Ω RSS –ø–∞—Ä—Å–µ—Ä –¥–ª—è {len(rss_channels)} –∫–∞–Ω–∞–ª–æ–≤")
            
            # HTML –ø–∞—Ä—Å–µ—Ä—ã
            if self.parser_config.is_parser_enabled('html'):
                html_channels = self.channel_config.get_enabled_html_channels()
                for channel_name, channel in html_channels.items():
                    if channel.parser_class == 'BCSParser':
                        http_client = await self.http_client.get_client()
                        bcs_parser = BCSParser(
                            settings=self.settings,
                            http_client=http_client,
                            message_sender=self.message_sender,
                            deduplication_manager=self.deduplication_manager,
                            date_checker=self.date_checker,
                            logger=self.logger,
                            error_callback=self.error_callback
                        )
                        self.parsers.append(bcs_parser)
                        self.logger.info(f"–°–æ–∑–¥–∞–Ω BCS –ø–∞—Ä—Å–µ—Ä")
            
            self.logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(self.parsers)} –ø–∞—Ä—Å–µ—Ä–æ–≤")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–æ–≤: {e}")
            raise
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            
            await self.initialize()
            
            self._running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã
            tasks = []
            for parser in self.parsers:
                task = asyncio.create_task(parser.start())
                tasks.append(task)
            
            if not tasks:
                self.logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ä—Å–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø—É—Å–∫–∞")
                return
            
            self.logger.info(f"–ó–∞–ø—É—â–µ–Ω–æ {len(tasks)} –ø–∞—Ä—Å–µ—Ä–æ–≤")
            
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫—É—é –æ—à–∏–±–∫—É
            if self.message_sender:
                error_msg = (
                    f"üö® <b>Critical System Error</b>\n\n"
                    f"‚ùå <b>Component:</b> Main Application\n"
                    f"‚ùå <b>Error:</b> {type(e).__name__}\n"
                    f"üìù <b>Details:</b> {str(e)[:200]}"
                )
                await self.message_sender.send_error_message(error_msg)
            
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞"""
        try:
            self.logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            
            self._running = False
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø–∞—Ä—Å–µ—Ä—ã
            for parser in self.parsers:
                try:
                    await parser.stop()
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞—Ä—Å–µ—Ä–∞ {parser.name}: {e}")
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º HTTP –∫–ª–∏–µ–Ω—Ç
            await self.http_client.close()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º Telegram –∫–ª–∏–µ–Ω—Ç
            if self.bot_client:
                await self.bot_client.disconnect()
            
            self.logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞: {e}")
    
    def get_status(self) -> dict:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
        
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        """
        return {
            'running': self._running,
            'parsers_count': len(self.parsers),
            'parsers_status': [parser.get_status() for parser in self.parsers],
            'channels_count': self.channel_config.get_enabled_channels_count(),
            'posted_count': self.deduplication_manager.get_posted_count()
        }


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = NewsBot()
    
    try:
        await bot.start()
    except KeyboardInterrupt:
        print("\n–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await bot.stop()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
